//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "puzzle")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub collection_id: String,
    pub difficulty: i32,
    pub solved_by: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::collection::Entity",
        from = "Column::CollectionId",
        to = "super::collection::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Collection,
    #[sea_orm(
        belongs_to = "super::sequence::Entity",
        from = "Column::SolvedBy",
        to = "super::sequence::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Sequence,
}

impl Related<super::collection::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Collection.def()
    }
}

impl Related<super::sequence::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sequence.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
